/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\nvar t = _interopRequire(__webpack_require__(1));\n\nconsole.log(t.map([1, 2, 3], function (x) {\n  return x + 1;\n}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvanMvbWFpbi5qcz82ZjIxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7SUFBTyxDQUFDLHVDQUFNLENBQWdCOztBQUU5QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLFdBQUM7U0FBSSxDQUFDLEdBQUcsQ0FBQztDQUFBLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0IGZyb20gJ3RyYW5zZHVjZXJzLmpzJztcblxuY29uc29sZS5sb2codC5tYXAoWzEsIDIsIDNdLCB4ID0+IHggKyAxKSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3N0YXRpYy9qcy9tYWluLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIiLCJmaWxlIjoiMC5qcyJ9");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("\n// basic protocol helpers\n\nvar symbolExists = typeof Symbol !== 'undefined';\n\nvar protocols = {\n  iterator: symbolExists ? Symbol.iterator : '@@iterator',\n  transformer: symbolExists ? Symbol('transformer') : '@@transformer'\n};\n\nfunction throwProtocolError(name, coll) {\n  throw new Error(\"don't know how to \" + name + \" collection: \" +\n                  coll);\n}\n\nfunction fulfillsProtocol(obj, name) {\n  if(name === 'iterator') {\n    // Accept ill-formed iterators that don't conform to the\n    // protocol by accepting just next()\n    return obj[protocols.iterator] || obj.next;\n  }\n\n  return obj[protocols[name]];\n}\n\nfunction getProtocolProperty(obj, name) {\n  return obj[protocols[name]];\n}\n\nfunction iterator(coll) {\n  var iter = getProtocolProperty(coll, 'iterator');\n  if(iter) {\n    return iter.call(coll);\n  }\n  else if(coll.next) {\n    // Basic duck typing to accept an ill-formed iterator that doesn't\n    // conform to the iterator protocol (all iterators should have the\n    // @@iterator method and return themselves, but some engines don't\n    // have that on generators like older v8)\n    return coll;\n  }\n  else if(isArray(coll)) {\n    return new ArrayIterator(coll);\n  }\n  else if(isObject(coll)) {\n    return new ObjectIterator(coll);\n  }\n}\n\nfunction ArrayIterator(arr) {\n  this.arr = arr;\n  this.index = 0;\n}\n\nArrayIterator.prototype.next = function() {\n  if(this.index < this.arr.length) {\n    return {\n      value: this.arr[this.index++],\n      done: false\n    };\n  }\n  return {\n    done: true\n  }\n};\n\nfunction ObjectIterator(obj) {\n  this.obj = obj;\n  this.keys = Object.keys(obj);\n  this.index = 0;\n}\n\nObjectIterator.prototype.next = function() {\n  if(this.index < this.keys.length) {\n    var k = this.keys[this.index++];\n    return {\n      value: [k, this.obj[k]],\n      done: false\n    };\n  }\n  return {\n    done: true\n  }\n};\n\n// helpers\n\nvar toString = Object.prototype.toString;\nvar isArray = typeof Array.isArray === 'function' ? Array.isArray : function(obj) {\n  return toString.call(obj) == '[object Array]';\n};\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nfunction isObject(x) {\n  return x instanceof Object &&\n    Object.getPrototypeOf(x) === Object.getPrototypeOf({});\n}\n\nfunction isNumber(x) {\n  return typeof x === 'number';\n}\n\nfunction Reduced(value) {\n  this.__transducers_reduced__ = true;\n  this.value = value;\n}\n\nfunction isReduced(x) {\n  return (x instanceof Reduced) || (x && x.__transducers_reduced__);\n}\n\nfunction deref(x) {\n  return x.value;\n}\n\n/**\n * This is for transforms that may call their nested transforms before\n * Reduced-wrapping the result (e.g. \"take\"), to avoid nested Reduced.\n */\nfunction ensureReduced(val) {\n  if(isReduced(val)) {\n    return val;\n  } else {\n    return new Reduced(val);\n  }\n}\n\n/**\n * This is for tranforms that call their nested transforms when\n * performing completion (like \"partition\"), to avoid signaling\n * termination after already completing.\n */\nfunction ensureUnreduced(v) {\n  if(isReduced(v)) {\n    return deref(v);\n  } else {\n    return v;\n  }\n}\n\nfunction reduce(coll, xform, init) {\n  if(isArray(coll)) {\n    var result = init;\n    var index = -1;\n    var len = coll.length;\n    while(++index < len) {\n      result = xform.step(result, coll[index]);\n      if(isReduced(result)) {\n        result = deref(result);\n        break;\n      }\n    }\n    return xform.result(result);\n  }\n  else if(isObject(coll) || fulfillsProtocol(coll, 'iterator')) {\n    var result = init;\n    var iter = iterator(coll);\n    var val = iter.next();\n    while(!val.done) {\n      result = xform.step(result, val.value);\n      if(isReduced(result)) {\n        result = deref(result);\n        break;\n      }\n      val = iter.next();\n    }\n    return xform.result(result);\n  }\n  throwProtocolError('iterate', coll);\n}\n\nfunction transduce(coll, xform, reducer, init) {\n  xform = xform(reducer);\n  if(init === undefined) {\n    init = xform.init();\n  }\n  return reduce(coll, xform, init);\n}\n\nfunction compose() {\n  var funcs = Array.prototype.slice.call(arguments);\n  return function(r) {\n    var value = r;\n    for(var i=funcs.length-1; i>=0; i--) {\n      value = funcs[i](value);\n    }\n    return value;\n  }\n}\n\n// transformations\n\nfunction transformer(f) {\n  return {\n    init: function() {\n      throw new Error('init value unavailable');\n    },\n    result: function(v) {\n      return v;\n    },\n    step: f\n  };\n}\n\nfunction bound(f, ctx, count) {\n  count = count != null ? count : 1;\n\n  if(!ctx) {\n    return f;\n  }\n  else {\n    switch(count) {\n    case 1:\n      return function(x) {\n        return f.call(ctx, x);\n      }\n    case 2:\n      return function(x, y) {\n        return f.call(ctx, x, y);\n      }\n    default:\n      return f.bind(ctx);\n    }\n  }\n}\n\nfunction arrayMap(arr, f, ctx) {\n  var index = -1;\n  var length = arr.length;\n  var result = Array(length);\n  f = bound(f, ctx, 2);\n\n  while (++index < length) {\n    result[index] = f(arr[index], index);\n  }\n  return result;\n}\n\nfunction arrayFilter(arr, f, ctx) {\n  var len = arr.length;\n  var result = [];\n  f = bound(f, ctx, 2);\n\n  for(var i=0; i<len; i++) {\n    if(f(arr[i], i)) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nfunction Map(f, xform) {\n  this.xform = xform;\n  this.f = f;\n}\n\nMap.prototype.init = function() {\n  return this.xform.init();\n};\n\nMap.prototype.result = function(v) {\n  return this.xform.result(v);\n};\n\nMap.prototype.step = function(res, input) {\n  return this.xform.step(res, this.f(input));\n};\n\nfunction map(coll, f, ctx) {\n  if(isFunction(coll)) { ctx = f; f = coll; coll = null; }\n  f = bound(f, ctx);\n\n  if(coll) {\n    if(isArray(coll)) {\n      return arrayMap(coll, f, ctx);\n    }\n    return seq(coll, map(f));\n  }\n\n  return function(xform) {\n    return new Map(f, xform);\n  }\n}\n\nfunction Filter(f, xform) {\n  this.xform = xform;\n  this.f = f;\n}\n\nFilter.prototype.init = function() {\n  return this.xform.init();\n};\n\nFilter.prototype.result = function(v) {\n  return this.xform.result(v);\n};\n\nFilter.prototype.step = function(res, input) {\n  if(this.f(input)) {\n    return this.xform.step(res, input);\n  }\n  return res;\n};\n\nfunction filter(coll, f, ctx) {\n  if(isFunction(coll)) { ctx = f; f = coll; coll = null; }\n  f = bound(f, ctx);\n\n  if(coll) {\n    if(isArray(coll)) {\n      return arrayFilter(coll, f, ctx);\n    }\n    return seq(coll, filter(f));\n  }\n\n  return function(xform) {\n    return new Filter(f, xform);\n  };\n}\n\nfunction remove(coll, f, ctx) {\n  if(isFunction(coll)) { ctx = f; f = coll; coll = null; }\n  f = bound(f, ctx);\n  return filter(coll, function(x) { return !f(x); });\n}\n\nfunction keep(coll) {\n  return filter(coll, function(x) { return x != null });\n}\n\nfunction Dedupe(xform) {\n  this.xform = xform;\n  this.last = undefined;\n}\n\nDedupe.prototype.init = function() {\n  return this.xform.init();\n};\n\nDedupe.prototype.result = function(v) {\n  return this.xform.result(v);\n};\n\nDedupe.prototype.step = function(result, input) {\n  if(input !== this.last) {\n    this.last = input;\n    return this.xform.step(result, input);\n  }\n  return result;\n};\n\nfunction dedupe(coll) {\n  if(coll) {\n    return seq(coll, dedupe());\n  }\n\n  return function(xform) {\n    return new Dedupe(xform);\n  }\n}\n\nfunction TakeWhile(f, xform) {\n  this.xform = xform;\n  this.f = f;\n}\n\nTakeWhile.prototype.init = function() {\n  return this.xform.init();\n};\n\nTakeWhile.prototype.result = function(v) {\n  return this.xform.result(v);\n};\n\nTakeWhile.prototype.step = function(result, input) {\n  if(this.f(input)) {\n    return this.xform.step(result, input);\n  }\n  return new Reduced(result);\n};\n\nfunction takeWhile(coll, f, ctx) {\n  if(isFunction(coll)) { ctx = f; f = coll; coll = null; }\n  f = bound(f, ctx);\n\n  if(coll) {\n    return seq(coll, takeWhile(f));\n  }\n\n  return function(xform) {\n    return new TakeWhile(f, xform);\n  }\n}\n\nfunction Take(n, xform) {\n  this.n = n;\n  this.i = 0;\n  this.xform = xform;\n}\n\nTake.prototype.init = function() {\n  return this.xform.init();\n};\n\nTake.prototype.result = function(v) {\n  return this.xform.result(v);\n};\n\nTake.prototype.step = function(result, input) {\n  if (this.i < this.n) {\n    result = this.xform.step(result, input);\n    if(this.i + 1 >= this.n) {\n      // Finish reducing on the same step as the final value. TODO:\n      // double-check that this doesn't break any semantics\n      result = ensureReduced(result);\n    }\n  }\n  this.i++;\n  return result;\n};\n\nfunction take(coll, n) {\n  if(isNumber(coll)) { n = coll; coll = null }\n\n  if(coll) {\n    return seq(coll, take(n));\n  }\n\n  return function(xform) {\n    return new Take(n, xform);\n  }\n}\n\nfunction Drop(n, xform) {\n  this.n = n;\n  this.i = 0;\n  this.xform = xform;\n}\n\nDrop.prototype.init = function() {\n  return this.xform.init();\n};\n\nDrop.prototype.result = function(v) {\n  return this.xform.result(v);\n};\n\nDrop.prototype.step = function(result, input) {\n  if(this.i++ < this.n) {\n    return result;\n  }\n  return this.xform.step(result, input);\n};\n\nfunction drop(coll, n) {\n  if(isNumber(coll)) { n = coll; coll = null }\n\n  if(coll) {\n    return seq(coll, drop(n));\n  }\n\n  return function(xform) {\n    return new Drop(n, xform);\n  }\n}\n\nfunction DropWhile(f, xform) {\n  this.xform = xform;\n  this.f = f;\n  this.dropping = true;\n}\n\nDropWhile.prototype.init = function() {\n  return this.xform.init();\n};\n\nDropWhile.prototype.result = function(v) {\n  return this.xform.result(v);\n};\n\nDropWhile.prototype.step = function(result, input) {\n  if(this.dropping) {\n    if(this.f(input)) {\n      return result;\n    }\n    else {\n      this.dropping = false;\n    }\n  }\n  return this.xform.step(result, input);\n};\n\nfunction dropWhile(coll, f, ctx) {\n  if(isFunction(coll)) { ctx = f; f = coll; coll = null; }\n  f = bound(f, ctx);\n\n  if(coll) {\n    return seq(coll, dropWhile(f));\n  }\n\n  return function(xform) {\n    return new DropWhile(f, xform);\n  }\n}\n\nfunction Partition(n, xform) {\n  this.n = n;\n  this.i = 0;\n  this.xform = xform;\n  this.part = new Array(n);\n}\n\nPartition.prototype.init = function() {\n  return this.xform.init();\n};\n\nPartition.prototype.result = function(v) {\n  if (this.i > 0) {\n    return ensureUnreduced(this.xform.step(v, this.part.slice(0, this.i)));\n  }\n  return this.xform.result(v);\n};\n\nPartition.prototype.step = function(result, input) {\n  this.part[this.i] = input;\n  this.i += 1;\n  if (this.i === this.n) {\n    var out = this.part.slice(0, this.n);\n    this.part = new Array(this.n);\n    this.i = 0;\n    return this.xform.step(result, out);\n  }\n  return result;\n};\n\nfunction partition(coll, n) {\n  if (isNumber(coll)) {\n    n = coll; coll = null;\n  }\n\n  if (coll) {\n    return seq(coll, partition(n));\n  }\n\n  return function(xform) {\n    return new Partition(n, xform);\n  };\n}\n\nvar NOTHING = {};\n\nfunction PartitionBy(f, xform) {\n  // TODO: take an \"opts\" object that allows the user to specify\n  // equality\n  this.f = f;\n  this.xform = xform;\n  this.part = [];\n  this.last = NOTHING;\n}\n\nPartitionBy.prototype.init = function() {\n  return this.xform.init();\n};\n\nPartitionBy.prototype.result = function(v) {\n  var l = this.part.length;\n  if (l > 0) {\n    return ensureUnreduced(this.xform.step(v, this.part.slice(0, l)));\n  }\n  return this.xform.result(v);\n};\n\nPartitionBy.prototype.step = function(result, input) {\n  var current = this.f(input);\n  if (current === this.last || this.last === NOTHING) {\n    this.part.push(input);\n  } else {\n    result = this.xform.step(result, this.part);\n    this.part = [input];\n  }\n  this.last = current;\n  return result;\n};\n\nfunction partitionBy(coll, f, ctx) {\n  if (isFunction(coll)) { ctx = f; f = coll; coll = null; }\n  f = bound(f, ctx);\n\n  if (coll) {\n    return seq(coll, partitionBy(f));\n  }\n\n  return function(xform) {\n    return new PartitionBy(f, xform);\n  };\n}\n\n// pure transducers (cannot take collections)\n\nfunction Cat(xform) {\n  this.xform = xform;\n}\n\nCat.prototype.init = function() {\n  return this.xform.init();\n};\n\nCat.prototype.result = function(v) {\n  return this.xform.result(v);\n};\n\nCat.prototype.step = function(result, input) {\n  var xform = this.xform;\n  var newxform = {\n    init: function() {\n      return xform.init();\n    },\n    result: function(v) {\n      return v;\n    },\n    step: function(result, input) {\n      var val = xform.step(result, input);\n      return isReduced(val) ? deref(val) : val;\n    }\n  }\n\n  return reduce(input, newxform, result);\n};\n\nfunction cat(xform) {\n  return new Cat(xform);\n}\n\nfunction mapcat(f, ctx) {\n  f = bound(f, ctx);\n  return compose(map(f), cat);\n}\n\n// collection helpers\n\nfunction push(arr, x) {\n  arr.push(x);\n  return arr;\n}\n\nfunction merge(obj, x) {\n  if(isArray(x) && x.length === 2) {\n    obj[x[0]] = x[1];\n  }\n  else {\n    var keys = Object.keys(x);\n    var len = keys.length;\n    for(var i=0; i<len; i++) {\n      obj[keys[i]] = x[keys[i]];\n    }\n  }\n  return obj;\n}\n\nvar arrayReducer = {\n  init: function() {\n    return [];\n  },\n  result: function(v) {\n    return v;\n  },\n  step: push\n}\n\nvar objReducer = {\n  init: function() {\n    return {};\n  },\n  result: function(v) {\n    return v;\n  },\n  step: merge\n};\n\nfunction getReducer(coll) {\n  if(isArray(coll)) {\n    return arrayReducer;\n  }\n  else if(isObject(coll)) {\n    return objReducer;\n  }\n  else if(fulfillsProtocol(coll, 'transformer')) {\n    return getProtocolProperty(coll, 'transformer');\n  }\n  throwProtocolError('getReducer', coll);\n}\n\n// building new collections\n\nfunction toArray(coll, xform) {\n  if(!xform) {\n    return reduce(coll, arrayReducer, []);\n  }\n  return transduce(coll, xform, arrayReducer, []);\n}\n\nfunction toObj(coll, xform) {\n  if(!xform) {\n    return reduce(coll, objReducer, {});\n  }\n  return transduce(coll, xform, objReducer, {});\n}\n\nfunction toIter(coll, xform) {\n  if(!xform) {\n    return iterator(coll);\n  }\n  return new LazyTransformer(xform, coll);\n}\n\nfunction seq(coll, xform) {\n  if(isArray(coll)) {\n    return transduce(coll, xform, arrayReducer, []);\n  }\n  else if(isObject(coll)) {\n    return transduce(coll, xform, objReducer, {});\n  }\n  else if(fulfillsProtocol(coll, 'transformer')) {\n    var transformer = getProtocolProperty(coll, 'transformer');\n    return transduce(coll, xform, transformer, transformer.init());\n  }\n  else if(fulfillsProtocol(coll, 'iterator')) {\n    return new LazyTransformer(xform, coll);\n  }\n  throwProtocolError('sequence', coll);\n}\n\nfunction into(to, xform, from) {\n  if(isArray(to)) {\n    return transduce(from, xform, arrayReducer, to);\n  }\n  else if(isObject(to)) {\n    return transduce(from, xform, objReducer, to);\n  }\n  else if(fulfillsProtocol(to, 'transformer')) {\n    return transduce(from,\n                     xform,\n                     getProtocolProperty(to, 'transformer'),\n                     to);\n  }\n  throwProtocolError('into', to);\n}\n\n// laziness\n\nvar stepper = {\n  result: function(v) {\n    return isReduced(v) ? deref(v) : v;\n  },\n  step: function(lt, x) {\n    lt.items.push(x);\n    return lt.rest;\n  }\n}\n\nfunction Stepper(xform, iter) {\n  this.xform = xform(stepper);\n  this.iter = iter;\n}\n\nStepper.prototype.step = function(lt) {\n  var len = lt.items.length;\n  while(lt.items.length === len) {\n    var n = this.iter.next();\n    if(n.done || isReduced(n.value)) {\n      // finalize\n      this.xform.result(this);\n      break;\n    }\n\n    // step\n    this.xform.step(lt, n.value);\n  }\n}\n\nfunction LazyTransformer(xform, coll) {\n  this.iter = iterator(coll);\n  this.items = [];\n  this.stepper = new Stepper(xform, iterator(coll));\n}\n\nLazyTransformer.prototype[protocols.iterator] = function() {\n  return this;\n}\n\nLazyTransformer.prototype.next = function() {\n  this.step();\n\n  if(this.items.length) {\n    return {\n      value: this.items.pop(),\n      done: false\n    }\n  }\n  else {\n    return { done: true };\n  }\n};\n\nLazyTransformer.prototype.step = function() {\n  if(!this.items.length) {\n    this.stepper.step(this);\n  }\n}\n\n// util\n\nfunction range(n) {\n  var arr = new Array(n);\n  for(var i=0; i<arr.length; i++) {\n    arr[i] = i;\n  }\n  return arr;\n}\n\n\nmodule.exports = {\n  reduce: reduce,\n  transformer: transformer,\n  Reduced: Reduced,\n  iterator: iterator,\n  push: push,\n  merge: merge,\n  transduce: transduce,\n  seq: seq,\n  toArray: toArray,\n  toObj: toObj,\n  toIter: toIter,\n  into: into,\n  compose: compose,\n  map: map,\n  filter: filter,\n  remove: remove,\n  cat: cat,\n  mapcat: mapcat,\n  keep: keep,\n  dedupe: dedupe,\n  take: take,\n  takeWhile: takeWhile,\n  drop: drop,\n  dropWhile: dropWhile,\n  partition: partition,\n  partitionBy: partitionBy,\n  range: range,\n\n  protocols: protocols,\n  LazyTransformer: LazyTransformer\n};\n\n//# sourceMappingURL=data:application/json;base64,");

/***/ }
/******/ ]);